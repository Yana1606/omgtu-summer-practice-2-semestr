#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №7.Реализация потока обработки команад.

**Цель:** Реализовать основу для многопоточного сервера приложений.

**Результаты:** После выполнения работы Вы сможете:
1. Обрабатывать множество операций в несколько потоков.
2. Останавливать потоки по запросу извне.

## Задание.
Пусть операция задана интерфейсом

#!csharp

public interface ICommand
{
    void Execute();
}

#!csharp

using System;
using System.Collections.Concurrent;
using System.Threading;

public interface ICommand
{
    void Execute();
}

public class ServerThread
{
    private readonly ConcurrentQueue<ICommand> commandQueue = new ConcurrentQueue<ICommand>();
    private Thread runThread;
    private volatile bool isRunning;

    public Thread RunThread => runThread;

    public ServerThread()
    {
        isRunning = true;
        runThread = new Thread(Run);
        runThread.Start();
    }

    //метод для добавления команды в очередь
    public void AddCommand(ICommand command)
    {
        if (isRunning)
        {
            commandQueue.Enqueue(command);
        }
    }

    //основной метод, выполняющий команды из очереди
    private void Run()
    {
        while (isRunning || !commandQueue.IsEmpty)
        {
            if (commandQueue.TryDequeue(out ICommand command))
            {
                try
                {
                    command.Execute();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Exception caught: {ex.Message}");
                }
            }
        }
    }

    public void HardStop()
    {
        isRunning = false;
        foreach (var remainingCommand in commandQueue)
        {
            try
            {
                remainingCommand.Execute();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception caught: {ex.Message}");
            }
        }
        commandQueue.Clear();
        runThread.Interrupt();
    }

    public void SoftStop()
    {
        isRunning = false;
        foreach (var remainingCommand in commandQueue)
        {
            try
            {
                remainingCommand.Execute();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception caught: {ex.Message}");
            }
        }
        commandQueue.Clear();
    }

    public void WaitForCompletion()
    {
        runThread.Join();
    }
}

public class HardStopCommand : ICommand
{
    private readonly ServerThread serverThread;

    public HardStopCommand(ServerThread serverThread)
    {
        this.serverThread = serverThread;
    }

    public void Execute()
    {
        if (Thread.CurrentThread != serverThread.RunThread)
        {
            throw new InvalidOperationException("Current thread does not match ServerThread thread");
        }
        serverThread.HardStop();
    }
}


public class SoftStopCommand : ICommand
{
    private readonly ServerThread serverThread;

    public SoftStopCommand(ServerThread serverThread)
    {
        this.serverThread = serverThread;
    }

    public void Execute()
    {
        if (Thread.CurrentThread != serverThread.RunThread)
        {
            throw new InvalidOperationException("Current thread does not match ServerThread thread");
        }
        serverThread.SoftStop();
    }
}
#!csharp

UnitTest.HardTest();
UnitTest.SoftTest();

#!markdown

Классы, наследующие интерйес ICommand будем называть **Командами.**

Реализовать класс ServerThread и команды по hard и soft завершению потока. 

ServerThread может менять свое поведение для обработки следующей Команды.
Исключение, выброшенное из Команды, перехватывается и передается вместе с самой Командой в ExceptionHandler (см. ЛР №5) Примечание. Наличие реализованного обработчика исключений не обязательно для выполнения данной задачи. 

Команда HardStop приводит к немедленной остановке потока, несмотря на, что в очереди потока есть еще Команды.
Команда  SoftStop останавливает поток, когда в очереди потока закончатся все Команды.

Команды HardStop и SoftStop успешно выполняются только в потоке, который они должны остановить, в противном случае выбрасывают исключение.
Отсутствие Команд в очереди потока не должно требовать значительных затрат процессорного времени. Значительными считаются затраты, которые зависят от времени простоя потока.

Написать проверку, которая гарантирует правильное выполнение команд HardStop и SoftStop.
